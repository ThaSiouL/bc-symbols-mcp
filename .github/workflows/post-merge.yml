name: Post-Merge Release

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  release-on-merge:
    # Only run if PR was merged (not just closed) and was a version bump PR
    if: >
      github.event.pull_request.merged == true &&
      startsWith(github.event.pull_request.title, 'chore: bump version to v')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write
      id-token: write # for npm provenance

    steps:
    - name: Checkout merged code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: main  # Ensure we're on the merged main branch

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Extract version from package.json
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous version tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -z "$PREV_TAG" ]; then
          COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" -n 20)
        else
          COMMITS=$(git log ${PREV_TAG}..HEAD --oneline --pretty=format:"- %s (%h)")
        fi
        
        # Create changelog content
        cat > CHANGELOG_TEMP.md << EOF
        ## Changes in v${{ steps.version.outputs.version }}
        
        $COMMITS
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...v${{ steps.version.outputs.version }}
        EOF
        
        echo "changelog-file=CHANGELOG_TEMP.md" >> $GITHUB_OUTPUT

    - name: Create and push tag
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create and push the tag
        git tag "v${{ steps.version.outputs.version }}"
        git push origin "v${{ steps.version.outputs.version }}"
        echo "âœ… Created and pushed tag v${{ steps.version.outputs.version }}"

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body_path: ${{ steps.changelog.outputs.changelog-file }}
        draft: false
        prerelease: false

    - name: Publish to NPM
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        # Publish with provenance for supply chain security
        npm publish --access public --provenance
        echo "âœ… Published to NPM successfully with provenance"

    - name: Create MCP Installation Instructions
      run: |
        cat > INSTALL_INSTRUCTIONS.md << EOF
        # BC Symbols MCP v${{ steps.version.outputs.version }} Installation
        
        ## NPM Installation
        \`\`\`bash
        npm install -g bc-symbols-mcp@${{ steps.version.outputs.version }}
        \`\`\`
        
        ## Direct MCP Installation
        \`\`\`bash
        npx @modelcontextprotocol/cli install bc-symbols-mcp
        \`\`\`
        
        ## Usage
        Add to your MCP client configuration:
        \`\`\`json
        {
          "mcpServers": {
            "bc-symbols": {
              "command": "bc-symbols-mcp",
              "args": []
            }
          }
        }
        \`\`\`
        EOF

    - name: Upload installation instructions
      uses: actions/upload-artifact@v4
      with:
        name: installation-instructions-v${{ steps.version.outputs.version }}
        path: INSTALL_INSTRUCTIONS.md
        retention-days: 30

    - name: Notify success
      run: |
        echo "ðŸŽ‰ Successfully released v${{ steps.version.outputs.version }}!"
        echo "âœ… GitHub release created"
        echo "âœ… NPM package published with provenance"
        echo "âœ… Installation instructions uploaded"