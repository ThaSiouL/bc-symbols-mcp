name: Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/**'
      - '**/*.md'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Build project
      run: npm run build

  release:
    needs: test
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Determine version bump
      id: version
      env:
        COMMIT_MSG: ${{ github.event.head_commit.message }}
      run: |
        # Check commit messages for version bump indicators
        if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"[major]"* ]]; then
          echo "bump=major" >> $GITHUB_OUTPUT
        elif [[ "$COMMIT_MSG" == *"feat"* ]] || [[ "$COMMIT_MSG" == *"[minor]"* ]]; then
          echo "bump=minor" >> $GITHUB_OUTPUT
        else
          echo "bump=patch" >> $GITHUB_OUTPUT
        fi

    - name: Bump version
      id: bump
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Bump version based on commit type
        NEW_VERSION=$(npm version ${{ steps.version.outputs.bump }} --no-git-tag-version)
        echo "new-version=${NEW_VERSION#v}" >> $GITHUB_OUTPUT
        
        # Update package.json
        npm version ${{ steps.version.outputs.bump }} --no-git-tag-version
        
        # Update version in src/server.ts (both locations)
        sed -i "s/version: '[^']*'/version: '${NEW_VERSION#v}'/g" src/server.ts

    - name: Generate changelog
      id: changelog
      run: |
        # Create a simple changelog based on commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" -n 20)
        else
          COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s (%h)")
        fi
        
        # Create changelog content
        cat > CHANGELOG_TEMP.md << EOF
        ## Changes in v${{ steps.bump.outputs.new-version }}
        
        $COMMITS
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...v${{ steps.bump.outputs.new-version }}
        EOF
        
        echo "changelog-file=CHANGELOG_TEMP.md" >> $GITHUB_OUTPUT

    - name: Create version bump branch
      run: |
        BRANCH_NAME="release/v${{ steps.bump.outputs.new-version }}"
        git checkout -b "$BRANCH_NAME"
        git add package.json package-lock.json src/server.ts
        git commit -m "chore: bump version to v${{ steps.bump.outputs.new-version }} [skip ci]"
        git push origin "$BRANCH_NAME"
        echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
      id: branch

    - name: Create version bump PR
      run: |
        PR_URL=$(gh pr create \
          --title "chore: bump version to v${{ steps.bump.outputs.new-version }}" \
          --body "Automated version bump to v${{ steps.bump.outputs.new-version }}" \
          --base main \
          --head "${{ steps.branch.outputs.branch-name }}")
        echo "pr-url=$PR_URL" >> $GITHUB_OUTPUT
      id: pr
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Enable auto-merge for version bump PR
      run: |
        # Enable auto-merge - GitHub will handle the merge when checks pass
        gh pr merge "${{ steps.pr.outputs.pr-url }}" --auto --squash
        echo "✅ Auto-merge enabled for PR: ${{ steps.pr.outputs.pr-url }}"
        echo "🔄 GitHub will automatically merge when all checks pass"
        echo "📋 The post-merge workflow will handle tagging and release creation"
        echo "🗑️ Branch deletion will be handled by GitHub's repository settings"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  notify:
    needs: [test, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.release.result == 'success' }}
      run: |
        echo "🎉 Version bump PR created successfully!"
        echo "✅ Tests passed"
        echo "✅ Version bumped in branch"
        echo "✅ Auto-merge enabled"
        echo "🔄 Waiting for GitHub to merge PR when checks pass"
        echo "📋 Post-merge workflow will handle release creation"

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.release.result == 'failure' }}
      run: |
        echo "❌ Version bump PR creation failed!"
        echo "Test result: ${{ needs.test.result }}"
        echo "Release result: ${{ needs.release.result }}"
        exit 1